{"version":3,"sources":["services/CommonWestParkConstants.js","services/RemoteDataService.js","services/SynonymsAndLanguages.js","services/GeomarkersService.js","components/AsidePhotoComponent.js","services/RemotePhotosService.js","components/AsideInfoComponent.js","components/AsideFiltersComponent.js","components/MapWrapper.js","components/SelectLanguageComponent.js","components/SummaryComponent.js","components/MainPaneComponent.js","components/RemoteDataComponent.js","App.js","i18n.js","index.js"],"names":["params","rectangle_URL","CommonWestParkConstants","getPathToCrossOrigin","axios","get","flowering_URL","geopositions_URL","plants_URL","plant","lang","scientific_name","varNames","synonyms","undefined","length","name","find","x","lang_name","web_reference_wiki","rateOfPlant","flowering","Style","image","CircleStyle","radius","fill","Fill","color","stroke","Stroke","width","rate","green","blue","feature","plants","plantID","console","log","obj","id_gbif","set","SynonymsAndLanguages","getPlantsNameInLanguage","getWikiPageInLanguage","centerLong","centerLat","geopositions","plantsFrequency","plantsEvents","geomarkers","index","includes","show_only_flowering","geoMarker","Feature","type","geometry","Point","fromLonLat","longitude","latitude","id","gbif","wiki","desc","scientific_name_authorship","scientific_name_family","common_names","res","setStyle","setStyleForFeature","push","imStyle","height","AsidePhotoComponent","e","this","props","photos","photos1","photos2","i","Col","xs","md","href","target","Image","src","style","alt","Row","React","Component","photos_URL","post","response","getPhotos","then","images","data","ReactDOM","render","StrictMode","document","getElementById","featureStyle","marginLeft","backgroundColor","AsideInfoComponent","AsideFiltersComponent","handleChangeGeomarkers","handleChangeMarkers","coordinatesWithFilter","GeomarkersService","getMarkersArray","i18n","language","selectFilter","locale","checked","selectedIndex","filter","options","currentFeature","refreshGeomarkers","getNameFeatureInLanguage","RemotePhotosService","renderPhoto","isChecked","indexOf","mostCommon","nameFamily","text","arrayPlantFamily","optionsSpecies","setFamilies","Set","add","nameForUser","value","sort","a","b","nameA","toUpperCase","nameB","optionsFamilies","item","t","onChange","handleChangeWithoutCommon","bind","handleChangeSelectFamily","handleChangeSelectFromListSpecies","MapWrapper","state","vectorLayer","VectorLayer","doMapWithMarkers","map","Map","layers","TileLayer","source","OSM","view","View","center","mainRectangle","zoom","currentThis","on","evt","forEachFeatureAtPixel","pixel","setSource","VectorSource","features","border","marginRight","SelectLanguageComponent","handleChangeLanguage","langs","nameDefault","setState","langID","key","handleChangeSelectFromList","Summary","useTranslation","size","mostCommonSpecies","mostRareSpecies","nowFlowering","MainPaneComponent","changeLanguage","rerenderSummaryAndFilter","makePlantsFrequency","frequencyData","mostRare","kMax","reversePlantsFrequency","Symbol","iterator","entries","j","iMax","refreshFrequencyData","renderSummary","renderAsideFilter","forEach","element","has","RemoteDataComponent","isLoadingRectangle","isLoadingPlants","isLoadingFlowering","isLoadingData","RemoteDataService","getGeopositions","getLongLatRectangle","getAllPlants","getEventFlowering","App","className","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","resources","ru","translations","title","MappedSpecies","MostCommon","MostRare","Flowering","Filters","FiltersWithoutCommon","FiltersOnlyRarest","FiltersOnlyOne","FiltersByFamily","Footer","uk","de","en","ns","defaultNS","react","useSuspense","wait"],"mappings":"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","file":"static/js/main.f41c8aa8.chunk.js","sourcesContent":[" \r\n//path to cross origin (Java API)\r\nconst pathToCrossOrigin = 'http://94.130.181.51:8095/apiWestpark/';\r\n//const pathToCrossOrigin = 'http://localhost:8080/apiWestpark/';\r\n\r\n \r\nclass CommonWestParkConstants {\r\n\r\n    getPathToCrossOrigin(params) {\r\n        return pathToCrossOrigin;\r\n    }\r\n\r\n}\r\n\r\nexport default new CommonWestParkConstants();","import axios from 'axios';\r\nimport CommonWestParkConstants from './CommonWestParkConstants';\r\n\r\nclass RemoteDataService {\r\n\r\n    //main map's rectangle (min, max long and lat)\r\n    getLongLatRectangle(params) {\r\n        const rectangle_URL = CommonWestParkConstants.getPathToCrossOrigin(params) + 'longlatRectangle';\r\n        return axios.get(rectangle_URL);\r\n    }\r\n\r\n    //plant's events(now only flowering)\r\n    getEventFlowering(params) {\r\n        const flowering_URL = CommonWestParkConstants.getPathToCrossOrigin(params) + 'flowering';\r\n        return axios.get(flowering_URL);\r\n    }\r\n\r\n    //get all geolocations\r\n    getGeopositions(params) {\r\n        const geopositions_URL = CommonWestParkConstants.getPathToCrossOrigin(params) + 'geopositions';\r\n        return axios.get(geopositions_URL);\r\n    }\r\n\r\n    //all plants (different)\r\n    getAllPlants(params) {\r\n        const plants_URL = CommonWestParkConstants.getPathToCrossOrigin(params) + 'plantsList';\r\n        return axios.get(plants_URL);\r\n    }\r\n\r\n}\r\n\r\nexport default new RemoteDataService();","\r\nclass SynonymsAndLanguages {\r\n\r\n    //get plant's name in browser's (user's) language\r\n    getPlantsNameInLanguage(plant, lang) {\r\n        if (lang === 'en') {\r\n            return plant.scientific_name;\r\n        }\r\n        const varNames = plant.synonyms;\r\n        if (varNames === undefined || varNames.length === 0) {\r\n            return plant.scientific_name;\r\n        } else {\r\n            const name = varNames.find(x => x.lang === lang)\r\n            if (name === undefined) {\r\n                return plant.scientific_name;\r\n            } else {\r\n                return name.lang_name;\r\n            }\r\n        }\r\n    }\r\n\r\n    //get wiki-page in browser's (user's) language\r\n    getWikiPageInLanguage(plant, lang) {\r\n        if (lang === 'en') {\r\n            return plant.web_reference_wiki;\r\n        }\r\n        const varNames = plant.synonyms\r\n        if (varNames === undefined || varNames.length === 0) {\r\n            return plant.web_reference_wiki;\r\n        } else {\r\n            const name = varNames.find(x => x.lang === lang)\r\n            if (name === undefined) {\r\n                return plant.web_reference_wiki;\r\n            } else {\r\n                return name.web_reference_wiki;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new SynonymsAndLanguages();","//ol\r\nimport 'ol/ol.css';\r\nimport { fromLonLat } from \"ol/proj\";\r\n//\r\nimport Feature from 'ol/Feature';\r\nimport Point from 'ol/geom/Point';\r\nimport {\r\n    Circle as CircleStyle,\r\n    Fill,\r\n    Stroke,\r\n    Style\r\n} from 'ol/style';\r\n\r\nimport SynonymsAndLanguages from '../services/SynonymsAndLanguages';\r\n\r\nclass GeomarkersService {\r\n\r\n    //set colour for feature by frequency\r\n    setStyleForFeature(rateOfPlant, flowering) {\r\n        if (!flowering) {\r\n            let rate = rateOfPlant;\r\n            if (rate > 250) { rate = 250 }\r\n            let green = 0\r\n            let blue = 0\r\n            if (rate <= 125) {\r\n                green = rate\r\n            } else {\r\n                green = 125\r\n            }\r\n            if (rate > 125) {\r\n                blue = 0\r\n            } else {\r\n                blue = rate - 125\r\n            }\r\n            return new Style({\r\n                image: new CircleStyle({\r\n                    radius: 4,\r\n                    // from 50 to 250\r\n                    fill: new Fill({ color: 'rgb(0, ' + (75 + green) + ', ' + (75 + blue) + ')' }),\r\n                    stroke: new Stroke({\r\n                        color: 'white',\r\n                        width: 2,\r\n                    }),\r\n                }),\r\n            })\r\n        } else {\r\n            //#FF9E2C orange - for flowering plants\r\n            return new Style({\r\n                image: new CircleStyle({\r\n                    radius: 4,\r\n                    fill: new Fill({ color: '#FF9E2C' }),\r\n                    stroke: new Stroke({\r\n                        color: 'white',\r\n                        width: 2,\r\n                    }),\r\n                }),\r\n            })\r\n        }\r\n    }\r\n\r\n    //we have features, but by selecting new language we have to rename them\r\n    getNameFeatureInLanguage(feature, lang, plants) {\r\n        const plantID = feature.get(\"gbif\");\r\n        console.log(\"Plant's id = \" + plantID)\r\n        const plant = plants\r\n            .find(obj => { return obj.id_gbif === plantID });\r\n        feature.set(\"name\", SynonymsAndLanguages.getPlantsNameInLanguage(plant, lang));\r\n        feature.set(\"wiki\", SynonymsAndLanguages.getWikiPageInLanguage(plant, lang));\r\n    }\r\n\r\n    //form actual array of geomarkers. \r\n    //centerLong: center of map, longitude\r\n    //centerLat: center of map, latitude\r\n    //geopositions: array with plants and geopositions\r\n    //mostCommonPlant: Map with frequency plants (by id_gbif) in geopositions\r\n    //plants: array with complete plants (with all fields)\r\n    //plantsEvents: flowering plants\r\n    //lang: browser's language\r\n    getMarkersArray(centerLong, centerLat, geopositions, plantsFrequency, plants, plantsEvents, lang) {\r\n\r\n        //form array of geomarkers\r\n        const geomarkers = [];\r\n        for (let index = 0; index < geopositions.length; index++) {\r\n\r\n            const plant = plants\r\n                .find(obj => { return obj.id_gbif === geopositions[index].plant.id_gbif });\r\n\r\n            //if flowering\r\n            const flowering = plantsEvents.includes(plant.id_gbif);\r\n\r\n            //if it isn't flowering and has plant.show_only_flowering = 1\r\n            if (!flowering && plant.show_only_flowering === 1) {\r\n                continue;\r\n            }\r\n\r\n            const geoMarker = new Feature(\r\n                {\r\n                    type: 'geoMarker',\r\n                    geometry: new Point(fromLonLat([geopositions[index].longitude, geopositions[index].latitude])),\r\n                    id: index + \"_\" + geopositions[index].id,\r\n                    gbif: plant.id_gbif,//id of plant\r\n                    /* name: SynonymsAndLanguages.getPlantsNameInLanguage(plant, lang),\r\n                    wiki: SynonymsAndLanguages.getWikiPageInLanguage(plant, lang), */\r\n                    name: \"\",\r\n                    wiki: \"\",\r\n                    desc: plant.scientific_name_authorship + \"; \" + plant.scientific_name_family + \": common names \" + plant.common_names\r\n                }\r\n            );\r\n            //find the plant in mostCommonPlants and get it rate\r\n            const res = plantsFrequency.get(plant.id_gbif);\r\n\r\n            geoMarker.setStyle(\r\n                //playing with colour und frequence of plant\r\n                this.setStyleForFeature(res, flowering)\r\n            );\r\n            geomarkers.push(geoMarker);\r\n        }\r\n\r\n        return geomarkers;\r\n    }\r\n\r\n}\r\n\r\nexport default new GeomarkersService();","import React from 'react';\r\nimport Image from 'react-bootstrap/Image';\r\nimport { Col, Row } from \"react-bootstrap\";\r\n\r\nconst imStyle = {width: 85, height: 85};\r\n\r\n/* schows 6 plant's photos*/\r\nclass AsidePhotoComponent extends React.Component {\r\n\r\n    showPhoto(e) {\r\n        //TODO (modal window/portal with big photo)\r\n        console.log(\"photo N:\" + e[\"i\"]);//it works:)\r\n    }\r\n\r\n    render() {\r\n        const feature = this.props.feature;\r\n        const photos = this.props.photos;\r\n        if (photos != null && photos.length > 0) {\r\n            let photos1 = [];\r\n            let photos2 = [];\r\n            for (let i = 0; i < this.props.photos.length; i++) {\r\n                if (i <= 2) {\r\n                    //photos1.push(<Col xs={6} md={4}> <Image src={process.env.PUBLIC_URL + \"/PreparedPhotosForPlantsDB/\" + this.props.photos[i]} style={{ width: 85, height: 85 }} alt={feature.get(\"id_gbif\")} onClick={() => { this.showPhoto({ i }) }} /></Col>)\r\n                    photos1.push(<Col xs={6} md={4}>\r\n                        <a href={process.env.PUBLIC_URL + \"/PreparedPhotosForPlantsDB/\" + this.props.photos[i] } target=\"_blank\">\r\n                    <Image \r\n                        src={process.env.PUBLIC_URL + \"/PreparedPhotosForPlantsDB/\" + this.props.photos[i] } \r\n                        style={imStyle}      \r\n                        alt={feature.get(\"id_gbif\")}/>\r\n                        </a></Col>)\r\n        \r\n                } else {\r\n                    if (i <= 5) {\r\n                        photos2.push(<Col xs={6} md={4}> \r\n                        <a href={process.env.PUBLIC_URL + \"/PreparedPhotosForPlantsDB/\" + this.props.photos[i] } target=\"_blank\">\r\n                        <Image src={process.env.PUBLIC_URL + \"/PreparedPhotosForPlantsDB/\" + this.props.photos[i]} \r\n                        style={imStyle} alt={feature.get(\"id_gbif\")} />\r\n                        </a></Col>)\r\n                    }\r\n                }\r\n            }\r\n            return (\r\n                <div>\r\n                    <Row>\r\n                        {photos1}\r\n                    </Row>\r\n                    <p></p>\r\n                    <Row>\r\n                        {photos2}\r\n                    </Row>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div> </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default AsidePhotoComponent","import axios from 'axios';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CommonWestParkConstants from './CommonWestParkConstants';\r\n\r\nimport AsidePhotoComponent from '../components/AsidePhotoComponent';\r\n\r\n\r\n//all photos of plant\r\nclass RemotePhotosService {\r\n\r\n    async getPhotos(gbif) {\r\n        const photos_URL = CommonWestParkConstants.getPathToCrossOrigin() + 'photos';\r\n        const response = await axios.post(photos_URL, { params: { id_gbif: gbif } });\r\n        return response;\r\n    }\r\n\r\n    renderPhoto(feature) {\r\n        this.getPhotos(feature.get('gbif')).then(\r\n            (response) => {\r\n\r\n                let images = []\r\n                for (let index = 0; index < response.data.length; index++) {\r\n                    images.push(response.data[index]);\r\n                }\r\n                console.log(\"Photos loaded: \" + feature.get('gbif'));\r\n                ReactDOM.render(\r\n                    <React.StrictMode>\r\n                        <AsidePhotoComponent feature={feature} photos={images} />\r\n                    </React.StrictMode>,\r\n                    document.getElementById('plantsPhoto')\r\n                );\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nexport default new RemotePhotosService();","import React from 'react';\r\n\r\nconst featureStyle = { marginLeft: '0em', backgroundColor: '#EEE8AA'};\r\n\r\n/* return info about the plants after mouse-click at the right side*/\r\nclass AsideInfoComponent extends React.Component {\r\n\r\n    render() {\r\n        if (this.props.feature != null) {\r\n            const feature = this.props.feature;\r\n            return (\r\n                <div style={featureStyle}>\r\n                    <b>ID: </b> <span>{feature.get('id')}</span> <b> gbif: </b><span>{feature.get('gbif')}</span>\r\n                    <div>\r\n                        <b>name: </b><span>{feature.get('name')}</span>\r\n                    </div>\r\n                    <b>description: </b> <span>{feature.get('desc')}</span>\r\n                    <div>\r\n                        <a href={feature.get('wiki')} target=\"_blank\"><b>Plant's wiki-page: {feature.get('name')}</b></a>\r\n                    </div>\r\n                </div>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <div> </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default AsideInfoComponent","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport i18n from \"i18next\";\r\nimport GeomarkersService from '../services/GeomarkersService';\r\nimport RemotePhotosService from '../services/RemotePhotosService';\r\nimport AsideInfoComponent from './AsideInfoComponent';\r\nimport AsidePhotoComponent from './AsidePhotoComponent';\r\nimport SynonymsAndLanguages from '../services/SynonymsAndLanguages';\r\n\r\n/* filters aside*/\r\nclass AsideFiltersComponent extends React.Component {\r\n\r\n    //something like callback to the parent (MainPane)\r\n    handleChangeGeomarkers = (e) => this.props.handleChangeMarkers(e);\r\n\r\n    //change array by filter manipulations\r\n    refreshGeomarkers(coordinatesWithFilter) {\r\n        const geomarkers = GeomarkersService.getMarkersArray(\r\n            this.props.centerLong,\r\n            this.props.centerLat,\r\n            coordinatesWithFilter, this.props.plantsFrequency, this.props.plants,\r\n            this.props.flowering,\r\n            i18n.language);\r\n        this.handleChangeGeomarkers(geomarkers);\r\n        return geomarkers;\r\n    }\r\n\r\n\r\n    //handle selection in list (filter only for one species)\r\n    handleChangeSelectFromListSpecies() {\r\n        const selectFilter = document.getElementById(\"selectPlantID\");\r\n        const locale = i18n.language;\r\n\r\n        document.getElementById(\"id_common_trees\").checked = false;\r\n        //document.getElementById(\"id_rare_trees\").checked = false;\r\n        document.getElementById(\"selectFamilyID\").selectedIndex = 0;\r\n\r\n        if (selectFilter.selectedIndex === 0) {//without filter\r\n            this.handleChangeGeomarkers(GeomarkersService.getMarkersArray(\r\n                this.props.centerLong,\r\n                this.props.centerLat,\r\n                this.props.geopositions, this.props.plantsFrequency, this.props.plants,\r\n                this.props.flowering,\r\n                locale))\r\n            //clear info about plant\r\n            ReactDOM.render(\r\n                <React.StrictMode>\r\n                    <AsideInfoComponent feature={null}\r\n                    />\r\n                </React.StrictMode>,\r\n                document.getElementById('infoPlant'))\r\n            //and clear photo\r\n            ReactDOM.render(\r\n                <React.StrictMode>\r\n                    <AsidePhotoComponent feature={null} photos={null}\r\n                    />\r\n                </React.StrictMode>,\r\n                document.getElementById('plantsPhoto')\r\n            );\r\n        } else {//filter by id\r\n            const geopositions = this.props.geopositions;\r\n            const coordinatesWithFilter = geopositions\r\n                .filter(x => x.plant.id_gbif === selectFilter.options[selectFilter.selectedIndex].id);\r\n            const features = this.refreshGeomarkers(coordinatesWithFilter);\r\n            //immideately render info about plant (simple the first element in filter-array)\r\n            let currentFeature = features[0];\r\n            //info\r\n            GeomarkersService.getNameFeatureInLanguage(currentFeature, i18n.language, this.props.plants);\r\n            ReactDOM.render(\r\n                <React.StrictMode>\r\n                    <AsideInfoComponent feature={currentFeature}\r\n                    />\r\n                </React.StrictMode>,\r\n                document.getElementById('infoPlant')\r\n            );\r\n            //and photo\r\n            RemotePhotosService.renderPhoto(currentFeature);\r\n        }\r\n    }\r\n\r\n    //handle check-box \"Without common species\"\r\n    handleChangeWithoutCommon() {\r\n        const geopositions = this.props.geopositions;\r\n        let isChecked = document.getElementById(\"id_common_trees\").checked;\r\n        //document.getElementById(\"id_rare_trees\").checked = false;\r\n        document.getElementById(\"selectPlantID\").selectedIndex = 0;\r\n        document.getElementById(\"selectFamilyID\").selectedIndex = 0;\r\n        //clear info about plant\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsideInfoComponent feature={null}\r\n                />\r\n            </React.StrictMode>,\r\n            document.getElementById('infoPlant'))\r\n\r\n        if (isChecked) {\r\n            //filter\r\n            const coordinatesWithFilter = geopositions.filter(\r\n                function (e) { return this.indexOf(e.plant.id_gbif) < 0; },\r\n                this.props.mostCommon\r\n            );\r\n            this.refreshGeomarkers(coordinatesWithFilter);\r\n\r\n        } else {\r\n            this.refreshGeomarkers(geopositions);\r\n        }\r\n        //and clear photo\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsidePhotoComponent feature={null} photos={null}\r\n                />\r\n            </React.StrictMode>,\r\n            document.getElementById('plantsPhoto')\r\n        );\r\n    }\r\n\r\n    //handle check.box families\r\n    handleChangeSelectFamily() {\r\n        const locale = i18n.language;\r\n        const selectFilter = document.getElementById(\"selectFamilyID\");\r\n\r\n        document.getElementById(\"id_common_trees\").checked = false;\r\n        document.getElementById(\"selectPlantID\").selectedIndex = 0;\r\n        //clear info about plant\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsideInfoComponent feature={null}\r\n                />\r\n            </React.StrictMode>,\r\n            document.getElementById('infoPlant'));\r\n        //and clear photo\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsidePhotoComponent feature={null} photos={null}\r\n                />\r\n            </React.StrictMode>,\r\n            document.getElementById('plantsPhoto')\r\n        );\r\n        if (selectFilter.selectedIndex === 0) {//without filter\r\n            this.handleChangeGeomarkers(GeomarkersService.getMarkersArray(\r\n                this.props.centerLong,\r\n                this.props.centerLat,\r\n                this.props.geopositions, this.props.plantsFrequency, this.props.plants,\r\n                this.props.flowering,\r\n                locale))\r\n        } else {//filter by family\r\n            const geopositions = this.props.geopositions;\r\n            const nameFamily = selectFilter.options[selectFilter.selectedIndex].text;\r\n            const arrayPlantFamily = [];\r\n            const plants = this.props.plants;\r\n            for (let i = 0; i < plants.length; i++) {  \r\n                if(plants[i].scientific_name_family == nameFamily){\r\n                    arrayPlantFamily.push(plants[i].id_gbif);\r\n                }\r\n            }\r\n            const coordinatesWithFilter = geopositions\r\n                .filter(x => arrayPlantFamily.includes(x.plant.id_gbif));\r\n            this.handleChangeGeomarkers(GeomarkersService.getMarkersArray(\r\n                this.props.centerLong,\r\n                this.props.centerLat,\r\n                coordinatesWithFilter, this.props.plantsFrequency, this.props.plants,\r\n                this.props.flowering,\r\n                locale));\r\n        }\r\n    }\r\n\r\n    //stop this:\r\n    /*     \r\n        //handle check-box only rare trees\r\n        handleChangeRare() {\r\n            const geopositions = this.props.geopositions;\r\n            let isChecked = document.getElementById(\"id_rare_trees\").checked;\r\n            document.getElementById(\"id_common_trees\").checked = false;\r\n            document.getElementById(\"selectPlantID\").selectedIndex = 0;\r\n            //clear info about plant\r\n            ReactDOM.render(\r\n                <React.StrictMode>\r\n                    <AsideInfoComponent feature={null}\r\n                    />\r\n                </React.StrictMode>,\r\n                document.getElementById('infoPlant'));\r\n    \r\n            if (isChecked) {\r\n                //filter\r\n                const coordinatesWithFilter = geopositions.filter(\r\n                    function (e) { return this.indexOf(e.plant.id_gbif) >= 0; },\r\n                    this.props.mostRare\r\n                );\r\n                this.refreshGeomarkers(coordinatesWithFilter);\r\n            } else {\r\n                this.refreshGeomarkers(geopositions);\r\n            }\r\n            //and clear photo\r\n            ReactDOM.render(\r\n                <React.StrictMode>\r\n                    <AsidePhotoComponent feature={null} photos={null}\r\n                    />\r\n                </React.StrictMode>,\r\n                document.getElementById('plantsPhoto');\r\n            );\r\n        } */\r\n\r\n    render() {\r\n        const lang = i18n.language;//language\r\n        //options for filter and sorting array of plants:\r\n        const plants = this.props.plants;// all different plants\r\n        let optionsSpecies = [];//select species\r\n        let setFamilies = new Set//select family\r\n        setFamilies.add(\"--All (without filter)\")\r\n\r\n        for (let i = 0; i < plants.length; i++) {\r\n\r\n            //if flowering\r\n            const flowering = this.props.flowering.includes(plants[i].id_gbif);\r\n            //if it isn't flowering and has plant.show_only_flowering = 1 => omit this plant\r\n            if (!flowering && plants[i].show_only_flowering === 1) {\r\n                continue;\r\n            }\r\n            const nameForUser = SynonymsAndLanguages.getPlantsNameInLanguage(plants[i], lang);\r\n            optionsSpecies.push(<option value={nameForUser} id={plants[i].id_gbif} key={plants[i].id_gbif}>{nameForUser}</option>);\r\n\r\n            if(plants[i].scientific_name_family !== null){\r\n                setFamilies.add(plants[i].scientific_name_family);\r\n            }\r\n        }\r\n\r\n        optionsSpecies.sort(function (a, b) {\r\n            var nameA = a.props.value.toUpperCase();\r\n            var nameB = b.props.value.toUpperCase();\r\n            if (nameA < nameB) {\r\n                return -1;\r\n            }\r\n            if (nameA > nameB) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        })\r\n\r\n        //family options:\r\n        let optionsFamilies = [];\r\n        for (let item of setFamilies) {\r\n            optionsFamilies.push(<option value={item} id={item} key={item}>{item}</option>);\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h2>{this.props.t('Filters')}</h2>\r\n                <form>\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"id_common_trees\" name=\"filter_common_trees\" value=\"common_trees\" onChange={this.handleChangeWithoutCommon.bind(this)}></input>\r\n                        <p>{this.props.t('FiltersWithoutCommon')}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p>{this.props.t('FiltersByFamily')}</p>\r\n                        <select id=\"selectFamilyID\" onChange={this.handleChangeSelectFamily.bind(this)}>\r\n                            {optionsFamilies}\r\n                        </select>\r\n\r\n                    </div>\r\n                    {/* \r\n                    //stop this\r\n                    <div>\r\n                        <input type=\"checkbox\" id=\"id_rare_trees\" name=\"filter_rare_trees\" value=\"rare_trees\" onChange={this.handleChangeRare.bind(this)}></input>\r\n                        <p>{this.props.t('FiltersOnlyRarest')}</p>\r\n                    </div> */}\r\n                    <div>\r\n                        <p>{this.props.t('FiltersOnlyOne')}</p>\r\n                        <select id=\"selectPlantID\" onChange={this.handleChangeSelectFromListSpecies.bind(this)}>\r\n                            {optionsSpecies}\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AsideFiltersComponent","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n//i18next\r\nimport i18n from \"i18next\";\r\n\r\n//ol\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport OSM from 'ol/source/OSM';\r\nimport 'ol/ol.css';\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { Vector as VectorLayer } from 'ol/layer';\r\n\r\n//right side of the page\r\nimport AsideInfoComponent from './AsideInfoComponent';\r\nimport AsidePhotoComponent from './AsidePhotoComponent';\r\nimport RemotePhotosService from '../services/RemotePhotosService';\r\nimport GeomarkersService from '../services/GeomarkersService';\r\n\r\n/* just the map */\r\nclass MapWrapper extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            vectorLayer: new VectorLayer()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.doMapWithMarkers();\r\n\r\n    }\r\n\r\n    //doing map and markers (layer)\r\n    doMapWithMarkers() {\r\n\r\n        let map = new Map({\r\n            target: 'map',\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new OSM()\r\n                }),\r\n                //markers\r\n                this.state.vectorLayer\r\n            ],\r\n            view: new View({\r\n                center: fromLonLat([(this.props.mainRectangle[0] + this.props.mainRectangle[1]) / 2,\r\n                (this.props.mainRectangle[2] + this.props.mainRectangle[3]) / 2]),\r\n                zoom: 16\r\n            })\r\n        });\r\n\r\n        //by click on point - show details of plant\r\n        const currentThis = this;\r\n        map.on('click', function (evt) {\r\n            const feature = map.forEachFeatureAtPixel(evt.pixel, function (feature) {\r\n                return feature;\r\n            });\r\n            if (feature) {\r\n                //info\r\n                GeomarkersService.getNameFeatureInLanguage(feature, i18n.language, currentThis.props.plants);\r\n\r\n                ReactDOM.render(\r\n                    <React.StrictMode>\r\n                        <AsideInfoComponent feature={feature} />\r\n                    </React.StrictMode>,\r\n                    document.getElementById('infoPlant')\r\n                );\r\n                //photos\r\n                RemotePhotosService.renderPhoto(feature);\r\n            } else {\r\n                //info\r\n                ReactDOM.render(\r\n                    <React.StrictMode>\r\n                        <AsideInfoComponent feature={null} />\r\n                    </React.StrictMode>,\r\n                    document.getElementById('infoPlant')\r\n                );\r\n                //photo\r\n                ReactDOM.render(\r\n                    <React.StrictMode>\r\n                        <AsidePhotoComponent feature={null} photos={null} />\r\n                    </React.StrictMode>,\r\n                    document.getElementById('plantsPhoto')\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //have to do this here because of filter's change\r\n        this.state.vectorLayer.setSource(new VectorSource({\r\n            features: this.props.geomarkers\r\n        }));\r\n        const styleMap = {\r\n            width: '90%',\r\n            height: 500,\r\n            border: \"double\",\r\n            backgroundColor: '#cccccc',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto'\r\n        }\r\n\r\n        return (\r\n            <div id='map' style={styleMap}>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapWrapper\r\n","import React from 'react';\r\nimport i18n from \"i18next\";\r\n\r\n/*select language*/\r\nclass SelectLanguageComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            langs: []\r\n        }\r\n    }\r\n\r\n    //something like callback to the parent (MainPane)\r\n    handleChangeLanguage = (e) => this.props.handleChangeLanguage(e);\r\n\r\n    //\r\n    componentDidMount() {\r\n        let options = [];\r\n        let nameDefault = \"\";\r\n        if(i18n.language === 'de'){\r\n            nameDefault = \"Deutsch\"\r\n        } else if(i18n.language === 'ru'){\r\n            nameDefault = \"Русский\"\r\n        } else if(i18n.language === 'uk'){\r\n            nameDefault = \"Українська\"\r\n        } else {\r\n            nameDefault = \"English\"\r\n        }\r\n        options.push(<option value={i18n.language} id={i18n.language} key={i18n.language}>{nameDefault}</option>);\r\n        if (i18n.language !== 'en') {\r\n            options.push(<option value=\"en\" id=\"en\" key=\"en\">English</option>);\r\n        }\r\n        if (i18n.language !== 'de') {\r\n            options.push(<option value=\"de\" id=\"de\" key=\"de\">Deutsch</option>);\r\n        }\r\n        if (i18n.language !== 'ru') {\r\n            options.push(<option value=\"ru\" id=\"ru\" key=\"ru\">Русский</option>);\r\n        }\r\n        if (i18n.language !== 'uk') {\r\n            options.push(<option value=\"uk\" id=\"uk\" key=\"uk\">Українська</option>);\r\n        }\r\n        this.setState({ langs: options });\r\n    }\r\n\r\n    //handle selection in list (filter only for one species)\r\n    handleChangeSelectFromList() {\r\n        const selectFilter = document.getElementById(\"selectLanguageID\");\r\n        const langID = selectFilter.selectedIndex;\r\n        this.handleChangeLanguage(this.state.langs[langID].key);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <div>\r\n                        <select id=\"selectLanguageID\" onChange={this.handleChangeSelectFromList.bind(this)}>\r\n                            {this.state.langs}\r\n                        </select>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SelectLanguageComponent","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nexport default function Summary(props) {\r\n    const [t, i18n] = useTranslation();\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{ marginLeft: 2 + 'em' }}>{t(\"Summary\")}</h3>\r\n            <p style={{ marginLeft: 2 + 'em' }}>{t('MappedSpecies')} {props.plantsFrequency.size}. {t('MostCommon')} {props.mostCommonSpecies} {t('MostRare')} {props.mostRareSpecies} </p>\r\n            <p style={{ marginLeft: 2 + 'em' }}>{t('Flowering')} {props.nowFlowering}</p>\r\n        </div>\r\n    );\r\n} \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport i18n from \"i18next\";\r\nimport SynonymsAndLanguages from '../services/SynonymsAndLanguages';\r\nimport AsideFiltersComponent from './AsideFiltersComponent';\r\nimport AsideInfoComponent from './AsideInfoComponent';\r\nimport AsidePhotoComponent from './AsidePhotoComponent';\r\nimport GeomarkersService from '../services/GeomarkersService';\r\nimport MapWrapper from './MapWrapper';\r\nimport SelectLanguageComponent from './SelectLanguageComponent';\r\nimport Summary from './SummaryComponent';\r\n\r\n/* helpful class to be parent for the left and right sides*/\r\nclass MainPaneComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            geomarkers: [],\r\n            language: i18n.language\r\n        }\r\n    }\r\n\r\n    //change markers\r\n    handleChangeMarkers = (geomarkers) => (this.setState({ geomarkers }));\r\n\r\n    //change language\r\n    handleChangeLanguage = (language) => (\r\n        i18n.changeLanguage(language),\r\n\r\n        //clear info about plant\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsideInfoComponent feature={null}\r\n                />\r\n            </React.StrictMode>,\r\n            document.getElementById('infoPlant')),\r\n\r\n        //and clear photo\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsidePhotoComponent feature={null} photos={null}\r\n                />\r\n            </React.StrictMode>,\r\n            document.getElementById('plantsPhoto')\r\n        ),\r\n        this.rerenderSummaryAndFilter(),\r\n\r\n        this.setState({ language })\r\n    );\r\n\r\n\r\n    //by didmount or changing language: make service map with frequncy data\r\n    //0: mostCommon;\r\n    //1: mostRare;\r\n    //2: mostCommonSpecies;\r\n    //3: mostRareSpecies;\r\n    //4: nowFlowering;\r\n    //5: plantsFrequency;\r\n    //6: setFamilies\r\n    refreshFrequencyData() {\r\n\r\n        const plantsFrequency = this.makePlantsFrequency();\r\n\r\n        const frequencyData = new Map();\r\n\r\n        let mostRareSpecies = \"\";\r\n        let mostRare = [];\r\n        let mostCommonSpecies = \"\";\r\n        let mostCommon = [];\r\n\r\n        //most rare\r\n        const kMax = 12;\r\n        let i = 0;\r\n        for (let [key, value] of plantsFrequency) {\r\n\r\n            const plant = this.props.plants.find(x => x.id_gbif === key);\r\n            mostRare.push(key);\r\n            mostRareSpecies += SynonymsAndLanguages.getPlantsNameInLanguage(plant, i18n.language) + \" (\" + value\r\n                + ((i === kMax - 1) ? \").\" : \"); \");\r\n            i++;\r\n            if (i >= kMax) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        //most common\r\n        const reversePlantsFrequency = plantsFrequency;\r\n        //sorting the Map in reverse oder\r\n        reversePlantsFrequency[Symbol.iterator] = function* () {\r\n            yield* [...this.entries()].sort((a, b) => b[1] - a[1]);\r\n        }\r\n        let j = 0;\r\n        for (let [key, value] of reversePlantsFrequency) {\r\n            mostCommon.push(key);\r\n            mostCommonSpecies += SynonymsAndLanguages.getPlantsNameInLanguage(this.props.plants.find(x => x.id_gbif === key), i18n.language) + \" (\" + value\r\n                + ((j === kMax - 1) ? \").\" : \"); \");\r\n            j++;\r\n            if (j >= kMax) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        //flowering:\r\n        let iMax = 15;\r\n        if (this.props.flowering.length < iMax) {\r\n            iMax = this.props.flowering.length;\r\n        }\r\n        let nowFlowering = \"\";\r\n        for (let index = 0; index < iMax; index++) {\r\n            nowFlowering += SynonymsAndLanguages.getPlantsNameInLanguage(this.props.plants.find(x => x.id_gbif === this.props.flowering[index]), i18n.language)\r\n                + ((index === (iMax - 1)) ? \".\" : \"; \");\r\n        }\r\n\r\n        frequencyData.set(\"mostCommon\", mostCommon);\r\n        frequencyData.set(\"mostRare\", mostRare);\r\n        frequencyData.set(\"mostCommonSpecies\", mostCommonSpecies);\r\n        frequencyData.set(\"mostRareSpecies\", mostRareSpecies);\r\n        frequencyData.set(\"nowFlowering\", nowFlowering);\r\n        frequencyData.set(\"plantsFrequency\", plantsFrequency);\r\n\r\n        return frequencyData;\r\n    }\r\n\r\n\r\n    //rerenderAfterLanguageChanging\r\n    rerenderSummaryAndFilter() {\r\n        const frequencyData = this.refreshFrequencyData();\r\n        this.renderSummary(frequencyData);\r\n        this.renderAsideFilter(frequencyData);\r\n    }\r\n\r\n    //render Filter's side\r\n    renderAsideFilter(frequencyData) {\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <AsideFiltersComponent plants={this.props.plants}\r\n                    geopositions={this.props.geopositions}\r\n                    mainRectangle={this.props.mainRectangle}\r\n                    mostCommon={frequencyData.get('mostCommon')}\r\n                    mostRare={frequencyData.get('mostRare')}\r\n                    plantsFrequency={frequencyData.get('plantsFrequency')}\r\n                    handleChangeMarkers={this.handleChangeMarkers}\r\n                    flowering={this.props.flowering}\r\n                    t={this.props.t} />\r\n            </React.StrictMode>,\r\n            document.getElementById('filters'))\r\n    }\r\n\r\n    //render Summary\r\n    renderSummary(frequencyData) {\r\n        // summary's side\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <Summary plants={this.props.plants}\r\n                    mostRareSpecies={frequencyData.get('mostRareSpecies')}\r\n                    mostCommonSpecies={frequencyData.get('mostCommonSpecies')}\r\n                    nowFlowering={frequencyData.get('nowFlowering')}\r\n                    plantsFrequency={frequencyData.get('plantsFrequency')}\r\n                    t={this.props.t} />\r\n            </React.StrictMode>,\r\n            document.getElementById('summary'));\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const frequencyData = this.refreshFrequencyData();\r\n\r\n        const plantsFrequency = frequencyData.get('plantsFrequency');\r\n\r\n        this.setState({\r\n            geomarkers: GeomarkersService.getMarkersArray((this.props.mainRectangle[0] + this.props.mainRectangle[1]) / 2,\r\n                (this.props.mainRectangle[2] + this.props.mainRectangle[3]) / 2,\r\n                this.props.geopositions, plantsFrequency, this.props.plants,\r\n                this.props.flowering,//event = flowering\r\n                i18n.language)\r\n        });\r\n\r\n        //language\r\n        ReactDOM.render(\r\n            <React.StrictMode>\r\n                <SelectLanguageComponent\r\n                    handleChangeLanguage={this.handleChangeLanguage} />\r\n            </React.StrictMode>,\r\n            document.getElementById('select_language'));\r\n\r\n        this.renderSummary(frequencyData);\r\n        this.renderAsideFilter(frequencyData);\r\n\r\n    }\r\n\r\n\r\n    //form frequncy og plants on the map\r\n    makePlantsFrequency() {\r\n\r\n        const plantsFrequency = new Map();\r\n        this.props.geopositions.forEach(element => {\r\n\r\n            const gbif = element.plant.id_gbif;\r\n\r\n            //omit not flowering with flag show_only_flowering\r\n            //if flowering\r\n            const flowering = this.props.flowering.includes(gbif);\r\n            const plant = this.props.plants\r\n                .find(obj => { return obj.id_gbif === gbif });\r\n            //if it isn't flowering and has plant.show_only_flowering = 1 => omit this plant\r\n            if (flowering || plant.show_only_flowering === 0) {\r\n                if (plantsFrequency.has(gbif)) {\r\n                    plantsFrequency.set(gbif, 1 + plantsFrequency.get(gbif))\r\n                } else {\r\n                    plantsFrequency.set(gbif, 1)\r\n                }\r\n            }\r\n        });\r\n        //sorting Map\r\n        plantsFrequency[Symbol.iterator] = function* () {\r\n            yield* [...this.entries()].sort((a, b) => a[1] - b[1]);\r\n        }\r\n        return plantsFrequency;\r\n    }\r\n\r\n    render() {\r\n        return (<MapWrapper plants={this.props.plants}\r\n            geopositions={this.props.geopositions}\r\n            mainRectangle={this.props.mainRectangle}\r\n            geomarkers={this.state.geomarkers} />)\r\n    }\r\n}\r\n\r\n\r\nexport default MainPaneComponent","import React from 'react';\r\nimport RemoteDataService from '../services/RemoteDataService';\r\nimport MainPaneComponent from './MainPaneComponent';\r\n\r\nclass RemoteDataComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            geopositions: [], //all points with plants\r\n            mainRectangle: [],//0: minLongitude; 1: maxLongitude; 2: minLatitude; 3: maxLatitude\r\n            plants: [],//all plants, used in geopositions\r\n            flowering: [],//event = flowering\r\n            isLoadingRectangle: true,\r\n            isLoadingPlants: true,\r\n            isLoadingFlowering: true,\r\n            isLoadingData: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //get plants with coordinates\r\n        RemoteDataService.getGeopositions(null).then(\r\n            (response) => {\r\n                this.setState({ geopositions: response.data });\r\n                this.setState({ isLoadingData: false });\r\n                console.log(\"Geopositions loaded. Size = \"+response.data.length)\r\n            }\r\n        );\r\n\r\n        //get main rectangle\r\n        RemoteDataService.getLongLatRectangle(null).then(\r\n            (response) => {\r\n                this.setState({ mainRectangle: response.data });\r\n                this.setState({ isLoadingRectangle: false });\r\n                console.log(\"Rectangle loaded\")\r\n            }\r\n        );\r\n\r\n        //get plants\r\n        RemoteDataService.getAllPlants(null).then(\r\n            (response) => {\r\n                this.setState({ plants: response.data });\r\n                this.setState({ isLoadingPlants: false });\r\n                console.log(\"All plants loaded\")\r\n            }\r\n        );\r\n        \r\n        //plant's event = flowering\r\n        RemoteDataService.getEventFlowering(null).then(\r\n            (response) => {\r\n                this.setState({ flowering: response.data });\r\n                this.setState({ isLoadingFlowering: false });\r\n                console.log(\"Flowering loaded. Size: \"+response.data.length)\r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoadingRectangle || this.state.isLoadingData \r\n            || this.state.isLoadingPlants || this.state.isLoadingFlowering) {\r\n            return (\r\n                <div>\r\n                    <h1> Plant's List is loading</h1>\r\n                </div>)\r\n        } else {\r\n            return (<MainPaneComponent\r\n                mainRectangle={this.state.mainRectangle}\r\n                geopositions={this.state.geopositions}\r\n                plants={this.state.plants} \r\n                flowering={this.state.flowering}\r\n                t={this.props.t}/>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default RemoteDataComponent","import React from 'react';\nimport './App.css';\nimport RemoteDataComponent from './components/RemoteDataComponent';\nimport { useTranslation } from 'react-i18next';\n\nfunction App() {\n  const [t, i18n] = useTranslation();\n  return (\n      <div className=\"App\">\n        <RemoteDataComponent t={t} />\n      </div>\n  );\n}\n\nexport default App;","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\n\r\nimport Backend from 'i18next-http-backend';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n// don't want to use this?\r\n// have a look at the Quick start guide \r\n// for passing in lng and translations on init\r\n\r\ni18n\r\n    // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n    // learn more: https://github.com/i18next/i18next-http-backend\r\n    .use(Backend)\r\n    // detect user language\r\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n    .use(LanguageDetector)\r\n    // pass the i18n instance to react-i18next.\r\n    .use(initReactI18next)\r\n    // init i18next\r\n    // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n\r\n        /*     interpolation: {\r\n              escapeValue: false, // not needed for react as it escapes by default\r\n            }, */\r\n        fallbackLng: 'en',\r\n        debug: true,\r\n\r\n        //we init with resources   \r\n        resources: {\r\n\r\n            ru: {\r\n                translations: {\r\n                    title: \"Растения Вестпарка (Мюнхен)\",\r\n                    Summary: \"Растения Вестпарка (Мюнхен). Сводка\",\r\n                    MappedSpecies: \"Число обозначенных на карте видов: \",\r\n                    MostCommon: \"Часто встречающиеся виды (зеленый маркер): \",\r\n                    MostRare: \"Редко встречающиеся виды (темно-зеленый маркер): \",\r\n                    Flowering: \"Сейчас цветут (оранж. маркер): \",\r\n                    Filters: \"Фильтры: \",\r\n                    FiltersWithoutCommon: \"Показать без наиболее часто встречающихся\",\r\n                    FiltersOnlyRarest: \"Показать наиболее редкие\",\r\n                    FiltersOnlyOne: \"Показать только один вид из списка\",\r\n                    FiltersByFamily: \"Показать только одно семейство из списка\",\r\n                    Footer: \"Со всеми вопросами обращайтесь к Миропольскому Геннадию miropolskij@gmail.com\"\r\n                }\r\n            },\r\n\r\n            \r\n            uk: {\r\n                translations: {\r\n                    title: \"Рослини Вестпарку (Мюнхен)\",\r\n                    Summary: \"Рослини Вестпарку (Мюнхен). Зведення\",\r\n                    MappedSpecies: \"Кількість позначених на мапі видів: \",\r\n                    MostCommon: \"Найчастіші види (зелений маркер): \",\r\n                    MostRare: \"Рідкісні види (темно-зелений маркер): \",\r\n                    Flowering: \"Зараз квітнуть (оранж. маркер): \",\r\n                    Filters: \"Фільтри: \",\r\n                    FiltersWithoutCommon: \"Показати без найбільш вживаних\",\r\n                    FiltersOnlyRarest: \"Показати найбільш рідкісні\",\r\n                    FiltersOnlyOne: \"Показати тільки один вид зі списку\",\r\n                    FiltersByFamily: \"Показати тільки одну родину зі списку\",\r\n                    Footer: \"З усіма питаннями звертайтесь до Миропольського Геннадія miropolskij@gmail.com\"\r\n                }\r\n            },\r\n\r\n            de: {\r\n                translations: {\r\n                    title: \"Die Pflanzen des Westpark (München)\",\r\n                    Summary: \"Die Pflanzen des Westpark (München). Übersicht\",\r\n                    MappedSpecies: \"Zahl den auf der Karte bezeichnete Arten: \",\r\n                    MostCommon: \"Übliche Arten (grüner marker): \",\r\n                    MostRare: \"Seltene Arten (dunkel-grüner marker): \",\r\n                    Flowering: \"In Blüte stehen (oranger marker): \",\r\n                    Filters: \"Filter: \",\r\n                    FiltersWithoutCommon: \"Zeigen ohne übliche\",\r\n                    FiltersOnlyRarest: \"Zeigen nur seltene\",\r\n                    FiltersOnlyOne: \"Zeigen nur eine Art von der Liste\",\r\n                    FiltersByFamily: \"Zeigen nur eine Familie von der Liste\",\r\n                    Footer: \"Wenden Sie mit allen Fragen an zu Myropolskyi Hennadii miropolskij@gmail.com\"\r\n                }\r\n            },\r\n\r\n            en: {\r\n                translations: {\r\n                    title: \"Westpark's Plants (Munich)\",\r\n                    Summary: \"Westpark's Plants (Munich). Summary\",\r\n                    MappedSpecies: \"Number of mapped species: \",\r\n                    MostCommon: \"Most common species (green marker): \",\r\n                    MostRare: \"Most rare species (dark-green marker): \",\r\n                    Flowering: \"Flowering now (orange marker): \",\r\n                    Filters: \"Filters: \",\r\n                    FiltersWithoutCommon: \"Show without most common\",\r\n                    FiltersOnlyRarest: \"Show only rarest\",\r\n                    FiltersOnlyOne: \"Select only one species from all the list\",\r\n                    FiltersByFamily: \"Select only one family from list\",\r\n                    Footer: \"With all questions mail to Myropolskyi Hennadii miropolskij@gmail.com\"\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        ns: [\"translations\"],\r\n        defaultNS: [\"translations\"],\r\n\r\n        react: {\r\n            useSuspense: false,\r\n            wait: true\r\n        }\r\n    });\r\n\r\n\r\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './i18n';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}